// standard configuration
getLogging().captureStandardOutput(LogLevel.DEBUG)
configurations { compile }

// add additional repositories here if you need them
repositories {
    //mavenRepo(urls:'http://download.java.net/maven/2/')
    mavenCentral()
}

// add any dependencies you want downloaded as part of the bootstrap process
dependencies {
    //compile 'com.google.collections:google-collections:1.0-rc2'
}

// this should be run once for the project
task('bootstrap') << {
    // download any dependencies and put them in lib/
    configurations['compile']?.files?.findAll { it.absolutePath.indexOf('unspecified') < 0 }.each { dep ->
        ant.copy(toDir: new File('lib'), file: dep)
    }

    // try to install any plugins
    new File('application.properties').eachLine { line ->
        if (line.startsWith("plugins")) {
            def plugin = line[8..-1].split('=')
            grails "install-plugin ${plugin[0]} ${plugin[1]}"
        }
    }
}

// mimic the tasks provided by the Java plugin
task('clean') << { grails 'clean' }
task('compile') << { grails 'compile' }
task('libs') << { grails 'package' }
task('test') << { grails 'test-app' }
task('dists') << { grails 'prod package' }

/*
test.afterTest { desc, result -> 
  ant.echo desc.dump()
  ant.echo result.dump()

  switch(result.getResultType()){
    case TestResult.ResultType.FAILURE:
      ant.echo "「神は言っている、ここで死ぬ運命ではないと」"
      break;
    case TestResult.ResultType.SKIPPED:
      ant.echo "「そんな実行結果で大丈夫か？」"
      break;
    case TestResult.ResultType.SUCCESS:
      ant.echo "「大丈夫だ、問題ない」"
      break;
  }
}
*/

gradle.taskGraph.afterTask { Task task, TaskState state ->
    println "name="+task.name
    //if(task.name != "jar")return
    if (state.failure) {
        println "「神は言っている、ここで死ぬ運命ではないと」"
    }
    else if(state.skipped){
        println "「そんな実行結果で大丈夫か？」"
    }
    else {
        println "「大丈夫だ。問題ない」"
    }
}

//ant.echo args.dump()

// additional run-related tasks
task('run-app') << { grails 'run-app' }
task('run-war') << { grails 'run-war' }
task('war') << { grails 'war' }

// call out to the grails command
def grails(target) {
    ant.echo "grails<target>:$target"
    //def cmdOpt=System.properties['cmdOpt']
    def cmdOptArr=null
    if(project.hasProperty("cmdOpt")){
      cmdOpt=project.getProperty("cmdOpt")
      cmdOptArr = cmdOpt.split(" ")
    }
    ant.echo "cmdOptArr=${cmdOptArr?.dump()}"

    if (System.getProperty("os.name").toLowerCase().startsWith("win")) {
		//gpath = "${project.getProperty('GRAILS_HOME')}/bin/grails.bat"
		gpath = "grails.bat"
		ant.echo gpath
		ant.echo projectDir
        ant.exec(executable: gpath, dir: projectDir, failonerror: true, logError:true ) {
            arg(value: target)
            if(cmdOptArr!=null)cmdOptArr.each{arg(value: it)}
        }
    } else {
        ant.exec(executable: 'grails', dir: projectDir, failonerror: true, logError:true ) {
            arg(value: target)
            if(cmdOptArr!=null)cmdOptArr.each{arg(value: it)}
        }
    }
}

/*
def grails(Object... params) {
ant.echo("grails<params>:${params.dump()}")
    if (System.getProperty("os.name").toLowerCase().startsWith("win")) {
        ant.exec(executable: 'grails.bat', dir: projectDir, failonerror: true, logError:true ) {
            params.each{
              arg(value: it)
            }
        }
    } else {
        ant.exec(executable: 'grails', dir: projectDir, failonerror: true, logError:true ) {
            arg(value: target)
        }
    }
}
*/

// if you want to use the gradle wrapper
task('wrapper', type: Wrapper).configure {
    gradleVersion = '0.7'
}
